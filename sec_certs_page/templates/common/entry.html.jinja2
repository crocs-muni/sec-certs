{% macro render_local_file(hashid, link_content, link, local_files, document, primary_style, secondary_style) %}
    <div class="btn-group">
        <a class="btn {{ primary_style }}" role="button" href="{{ link }}"
           data-bs-toggle="tooltip" data-bs-placement="bottom"
           title="{{ link.split("/")[-1] if "/" in link else link }}">{{ link_content|safe }}</a>
        {% for format in ("pdf", "txt") %}
            {% if local_files.get((document, format)) %}
                <a class="btn {{ secondary_style }}" role="button"
                   href="{{ url_for(".entry_" + document + "_" + format, hashid=hashid) }}"
                   data-bs-toggle="tooltip" data-bs-placement="bottom"
                   title="Local download">{{ format.upper() }}</a>
            {% endif %}
        {% endfor %}
    </div>
{% endmacro %}

{% macro render_local_files(hashid, local_files, cert_link, report_link, target_link, primary_style="btn-outline-primary", secondary_style="btn-outline-secondary") %}
    {% if cert_link %}
        {{ render_local_file(hashid, '<i class="fas fa-file-contract"></i> Certificate', cert_link, local_files, "cert", primary_style, secondary_style) }}
    {% endif %}
    {% if report_link %}
        {{ render_local_file(hashid, '<i class="fas fa-file-contract"></i> Certification report', report_link, local_files, "report", primary_style, secondary_style) }}
    {% endif %}
    {% if target_link %}
        {{ render_local_file(hashid, '<i class="fas fa-file-alt"></i> Security target', target_link, local_files, "target", primary_style, secondary_style) }}
    {% endif %}
{% endmacro %}

{% macro opt_line(name, key, obj, title) %}
    {% if key in obj and obj[key] %}
        <tr data-cs-name="{{ title }} - {{ name }}">
            <th scope="row">{{ name }}:</th>
            <td>{{ obj[key] }}</td>
        </tr>
    {% endif %}
{%- endmacro %}

{% macro render_pdf_meta(pdf_meta, title) %}
    <table class="table table-sm table-borderless table-dark w-auto">
        <tbody>
        {{ opt_line("Title", "/Title", pdf_meta, title) }}
        {{ opt_line("Subject", "/Subject", pdf_meta, title) }}
        {{ opt_line("Keywords", "/Keywords", pdf_meta, title) }}
        {{ opt_line("Author", "/Author", pdf_meta, title) }}
        {{ opt_line("Creation date", "/CreationDate", pdf_meta, title) }}
        {{ opt_line("Modification date", "/ModDate", pdf_meta, title) }}
        {{ opt_line("Pages", "pdf_number_of_pages", pdf_meta, title) }}
        {{ opt_line("Creator", "/Creator", pdf_meta, title) }}
        {{ opt_line("Producer", "/Producer", pdf_meta, title) }}
        </tbody>
    </table>
{%- endmacro %}

{% macro render_cve_impact(cve) %}
    {% if cve["impact"]["severity"] == "CRITICAL" %}
        <span style="color: var(--bs-red)"><i class="fas fa-fw fa-exclamation-triangle"></i></span>
        CRITICAL
    {% elif cve["impact"]["severity"] == "HIGH" %}
        <span style="color: var(--bs-orange)"><i class="fas fa-fw fa-exclamation-circle"></i></span>
        HIGH
    {% elif cve["impact"]["severity"] == "MEDIUM" %}
        <span style="color: var(--bs-yellow)"><i class="fas fa-fw fa-exclamation"></i></span> MEDIUM
    {% elif cve["impact"]["severity"] == "LOW" %}
        <span style="color: var(--bs-green)"><i class="fas fa-fw fa-exclamation"></i></span> LOW
    {% else %}
        {{ cve["impact"]["severity"] }}
    {% endif %}
{% endmacro %}

{% macro render_cve_links(cve, full=False) %}
    <div class="btn-group" role="group" aria-label="Basic example">
        <a href="https://www.cve.org/CVERecord?id={{ cve["cve_id"] }}"
           target="_blank" rel="noopener" title="CVE at cve.org"
           class="btn btn-outline-secondary btn-sm">{% if full %}cve.org{% else %}C{% endif %}</a>
        <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name={{ cve["cve_id"] }}"
           target="_blank" rel="noopener" title="CVE at cve.mitre.org"
           class="btn btn-outline-secondary btn-sm">{% if full %}cve.mitre.org{% else %}M{% endif %}</a>
        <a href="https://nvd.nist.gov/vuln/detail/{{ cve["cve_id"] }}" target="_blank"
           rel="noopener" title="CVE in NIST's Vulnerability Database"
           class="btn btn-outline-secondary btn-sm">{% if full %}nvd.nist.gov{% else %}N{% endif %}</a>
    </div>
{% endmacro %}

{% macro render_cves(cves) %}
    <table class="table table-striped my-2">
        <colgroup>
            <col style="width:15%">
            <col style="width:10%">
            <col style="width:20%">
            <col style="width:10%">
            <col style="width:10%">
            <col style="width:10%">
            <col style="width:15%">
        </colgroup>
        <thead class="table-light">
        <tr>
            <th scope="col" colspan="1" rowspan="2">ID</th>
            <th scope="col" colspan="1" rowspan="2">Links</th>
            <th scope="col" colspan="1" rowspan="2">Severity</th>
            <th scope="col" colspan="3">CVSS Score</th>
            <th scope="col" colspan="1" rowspan="2">Published on</th>
        </tr>
        <tr>
            <th scope="col" style="border-bottom-color: #dfe0e1">Base</th>
            <th scope="col" style="border-bottom-color: #dfe0e1">Exploitability</th>
            <th scope="col" style="border-bottom-color: #dfe0e1">Impact</th>
        </tr>
        </thead>
        <tbody>
        {% set years = namespace(cve=None, current=None) %}
        {% for cve in cves %}
            {% set years.current = cve["cve_id"].split("-")[1] %}
            <tr {% if years.current != years.cve and years.cve %}
                style="border-top: 2px solid var(--bs-dark)"{% endif %}>
                <td><a href="{{ url_for("vuln.cve", cve_id=cve["cve_id"]) }}">{{ cve["cve_id"] }}</a></td>
                <td>
                    {{ render_cve_links(cve) }}
                </td>
                <td>
                    {{ render_cve_impact(cve) }}
                </td>
                <td>{{ cve["impact"]["base_score"] }}</td>
                <td>{{ cve["impact"]["explotability_score"] }}</td>
                <td>{{ cve["impact"]["impact_score"] }}</td>
                <td>{{ cve["published_date"]|fromisoformat()|strftime("%d.%m.%Y %H:%M") }}</td>

            </tr>
            {% set years.cve = years.current %}
        {% endfor %}
        </tbody>
    </table>
{%- endmacro %}

{% macro render_references(network, hashid, type) %}
    {% if network and hashid in network.nodes %}
        {% set out_edges = network.out_edges(hashid) %}
        {% if out_edges %}
            <b>Outgoing</b>
            <ul class="outgoing-list">
                {% for edge in out_edges %}
                    {% set child_node = network.nodes[edge[1]] %}
                    {% if type in network.edges[edge]["type"] %}
                        <li>
                            <a href="{{ child_node["href"] }}">{{ child_node["certid"] }}</a>
                            - {{ child_node["name"] }}
                        </li>
                    {% endif %}
                {% endfor %}
            </ul>
        {% endif %}
        {% set in_edges = network.in_edges(hashid) %}
        {% if in_edges %}
            <b>Incoming</b>
            <ul class="incoming-list">
                {% for edge in in_edges %}
                    {% set parent_node = network.nodes[edge[0]] %}
                    {% if type in network.edges[edge]["type"] %}
                        <li>
                            <a href="{{ parent_node["href"] }}">{{ parent_node["certid"] }}</a>
                            - {{ parent_node["name"] }}
                        </li>
                    {% endif %}
                {% endfor %}
            </ul>
        {% endif %}
        {% if not out_edges and not in_edges %}
            <p>No references.</p>
        {% endif  %}
    {% endif %}
{%- endmacro %}

{% macro keywords_card(keyword_scan, doc_prefix, card_id, card_name, keyword_sources, hidden, map_funcs) %}
    {% set ns = namespace(render=False) %}
    {% for heading, keyword in keyword_sources.items() %}
        {% if keyword not in hidden and keyword_scan[keyword] %}
            {% set ns.render = True %}
        {% endif %}
    {% endfor %}
    {% if ns.render %}
        <div class="card mt-1">
            <div class="card-header" id="{{ doc_prefix }}-{{ card_id }}-head">
                <h4 class="mb-0">
                    <button class="btn btn-link" data-bs-toggle="collapse"
                            data-bs-target="#{{ doc_prefix }}-{{ card_id }}-card" aria-expanded="false"
                            aria-controls="{{ doc_prefix }}-{{ card_id }}-card">
                        {{ card_name }}
                        <i class="fas fa-chevron-down"></i>
                        <i class="fas fa-chevron-up"></i>
                    </button>
                </h4>
            </div>

            <div id="{{ doc_prefix }}-{{ card_id }}-card" class="collapse"
                 aria-labelledby="{{ doc_prefix }}-{{ card_id }}-head">
                <div class="card-body text-dark">
                    {% for heading, keyword in keyword_sources.items() %}
                        {% if keyword not in hidden and keyword_scan[keyword] %}
                            <div data-cs-name="{{ doc_prefix }} - {{ card_name }} - {{ heading }}">
                                <h5 class="mt-2">{{ heading }}</h5>
                                {{ double_join(keyword_scan[keyword], map_func=map_funcs.get(keyword, None)) }}
                            </div>
                        {% endif %}
                    {% endfor %}
                </div>
            </div>
        </div>
    {% endif %}
{% endmacro %}

{% macro double_join(rule_dict, separator=", ", map_func=None) %}
    {% for key in flatten(rule_dict).keys() %}
        {%- if map_func -%}{{ map_func(key) }}{%- else -%}{{ key }}{%- endif -%}
        {%- if not loop.last -%}{{ separator }}{%- endif -%}
    {% endfor %}
{%- endmacro %}


{% macro cryptography_keywords(keyword_scan, doc_prefix, hidden=[], map_funcs={}) -%}
    {{ keywords_card(keyword_scan, doc_prefix, "crypto", "Cryptography", {"Symmetric Algorithms": "symmetric_crypto",
                                                                          "Asymmetric Algorithms": "asymmetric_crypto",
                                                                          "Post-quantum Algorithms": "pq_crypto",
                                                                          "Hash functions": "hash_function",
                                                                          "Schemes": "crypto_scheme",
                                                                          "Protocols": "crypto_protocol",
                                                                          "Randomness": "randomness",
																		  "Engines": "crypto_engine",
																		  "Libraries": "crypto_library",
																		  "Elliptic Curves": "ecc_curve",
																		  "Block cipher modes": "cipher_mode",
																		  "TLS cipher suites": "tls_cipher_suite"}, hidden, map_funcs) }}
{%- endmacro %}

{% macro device_keywords(keyword_scan, doc_prefix, hidden=[], map_funcs={}) -%}
    {{ keywords_card(keyword_scan, doc_prefix, "device", "Device", {"Device models": "device_model",
																	"JavaCard versions": "javacard_version",
																	"JavaCard API constants": "javacard_api_const",
																	"JavaCard packages": "javacard_package",
																	"Operating System name": "os_name",
																	"CPLC": "cplc_data",
																	"IC data groups": "ic_data_group",
																	"Trusted Execution Environments": "tee_name",
																	"Vendor": "vendor"}, hidden, map_funcs) }}
{%- endmacro %}

{% macro security_keywords(keyword_scan, doc_prefix, hidden=[], map_funcs={}) -%}
    {{ keywords_card(keyword_scan, doc_prefix, "security", "Security", {"Side-channel analysis": "side_channel_analysis",
																		"Vulnerabilities": "vulnerability",
																		"Certification process": "certification_process"}, hidden, map_funcs) }}
{%- endmacro %}

{% macro other_keywords(keyword_scan, doc_prefix, hidden=[], map_funcs={}) -%}
    {{ keywords_card(keyword_scan, doc_prefix, "other", "Other", {"Standards": "standard_id",
																  "Technical reports": "technical_report_id"}, hidden, map_funcs) }}
{%- endmacro %}

{% macro metadata_binding_card(doc_prefix, index, data) %}
    {% for measurement in data %}
        {% set header_label = measurement["measurement_tool"] + " data by \"" + measurement["measurement_author"] + "\" on " + measurement["timestamp"] %}
        <div class="card mt-3 mb-3">
            <div class="card-header" id="{{ doc_prefix }}-{{ index }}-{{ loop.index }}-head">
                <h4 class="mb-0">
                    <button class="btn btn-link" data-bs-toggle="collapse"
                            data-bs-target="#{{ doc_prefix }}-{{ index }}-{{ loop.index }}-card" aria-expanded="false"
                            aria-controls="{{ doc_prefix }}-{{ index }}-{{ loop.index }}-card">
                        {{ header_label }}
                        <i class="fas fa-chevron-down"></i>
                        <i class="fas fa-chevron-up"></i>
                    </button>
                </h4>
            </div>

            <div id="{{ doc_prefix }}-{{ index }}-{{ loop.index }}-card" class="collapse"
                    aria-labelledby="{{ doc_prefix }}-{{ index }}-{{ loop.index }}-head">
                <div class="card-body text-dark">
                    <table class="metadata-header-table">
                        {% for key, value in measurement.items() %}
                            <tr class="metadata-header-table-row mt-1">
                                <td class="metadata-header-table-cell" style="width: 20%">{{ key }}</td>
                                {% if key == 'metadata_url' %}
                                    <td class="metadata-header-table-cell"><a href="{{ value }}" class="link">{{ value }}</a></td>
                                {% elif key == 'metadata_preview' %}
                                <td class="metadata-header-table-cell">
                                    <img src='data:image/jpeg;base64, {{ value }}' style='max-width:100%'>
                                </td>
                                {% else %}
                                    <td class="metadata-header-table-cell">{{ value }}</td>
                                {% endif %}
                            </tr>
                        {% endfor %}
                    </table>
                </div>
            </div>
        </div>
    {% endfor %}
{% endmacro %}