{% from "cc/utils.html.jinja2" import render_category, render_status %}

{% macro render_document_type(document_type) %}
    {% if document_type == "report" %}
        <span>Certification Report</span>
    {% elif document_type == "profile" %}
        <span>Protection Profile</span>
    {% endif %}
{%- endmacro %}

{% macro render_pagination(pagination, profiles, search=False) %}
    <div id="pagination">
    {% if search %}
        <span style="text-align: center">{{ pagination.info }}</span>
    {% endif %}
    <div class="mt-4 mb-4">
		{{ pagination.links }}
	</div>
	<table class="table table-striped table-bordered mb-4">
        <col style="width:5%">
		<col style="width:64%">
		<col style="width:7%">
		<col style="width:12%">
		<col style="width:12%">
		<thead>
			<tr class="border-bottom">
                <th>Category</th>
				<th>Name</th>
				<th>Status</th>
				<th>Certification date</th>
				<th>Archive date</th>
			</tr>
		</thead>
	{% for profile in profiles %}
        {% set idd = "" %}
        {% set name = profile["web_data"]["name"] %}
        {% set status = profile["web_data"]["status"] %}
        {% set hashid = profile["_id"] %}
        {% set cert_date = profile["web_data"]["not_valid_before"] %}
        {% set archive_date = profile["web_data"]["not_valid_after"] %}
        {% set category = profile["web_data"]["category"] %}
		<tr>
        <td class="pl-1">{{ render_category(category) }}&nbsp;{{ idd }}</td>
		<td><a href="{{ url_for('.entry', hashid=hashid) }}">{{ name }}</a></td>
		<td>{{ render_status(status) }}</td>
		<td>{{ cert_date.strftime("%m/%d/%Y") if cert_date else "" }}</td>
		<td>{{ archive_date.strftime("%m/%d/%Y") if archive_date else "" }}</td>
		</tr>
	{% endfor %}
	</table>
	<div class="mb-4">
		{{ pagination.links }}
	</div>
    </div>
{%- endmacro %}

{% macro render_plot(timeline) %}
    <div class="row mt-4 mb-4">
        <div class="col border ml-3 mr-3">
            <h2>Timeline</h2>
            <span>Matched protection profiles (monthly)</span>
            <div id="timeline"></div>
        </div>
    </div>

    <script>
        function renderTimeline(timeline) {
            let parser = d3.timeParse("%a, %d %b %Y %H:%M:%S GMT");
            let weekFormatter = d3.timeFormat("%m,%Y");
            let weekParser = d3.timeParse("%m,%Y");
            let data = d3.map(timeline, d => ({date: parser(d)}));
            let extent = d3.extent(data, d => d.date);
            let weekRange = d3.timeWeek.range(extent[0], extent[1]);

            let width = 800;
            let height = 320;
            let margin = {top: 20, right: 30, bottom: 30, left: 40};

            let x = d3.scaleUtc()
                .domain(extent)
                .range([margin.left, width - margin.right]);

            let nested = d3.rollup(data, v => v.length, d => weekFormatter(d.date));
            let base = d3.rollup(weekRange, v => 0, d => weekFormatter(d));

            let y = d3.scaleLinear()
                .domain([0, d3.max(nested, d => d[1])]).nice()
                .range([height - margin.bottom, margin.top]);

            let xAxis = g => g
                .attr("transform", `translate(0,${height - margin.bottom})`)
                .call(d3.axisBottom(x).ticks(width / 80).tickSizeOuter(0));
            let yAxis = g => g
                .attr("transform", `translate(${margin.left},0)`)
                .call(d3.axisLeft(y).tickFormat(d3.format("d")))
                .call(g => g.select(".domain").remove());
            let line = d3.line()
                .x(d => x(d.week))
                .y(d => y(d.count));

            let full = new d3.InternMap([...base, ...nested]);

            let res = d3.sort(d3.map(full, ([name, value]) => ({week: weekParser(name), count: value})), (d) => d.week);
            const svg = d3.create("svg")
                .attr("viewBox", [0, 0, width, height]);

            svg.append("path")
                .attr("fill", "none")
                .attr("stroke", "var(--bs-primary)")
                .attr("stroke-width", 1.5)
                .attr("d", line(res));

            svg.append("g")
                .call(xAxis);

            svg.append("g")
                .call(yAxis);

            d3.select("#timeline").append(() => svg.node());
        }

        let certsData = JSON.parse('{{ timeline|tojson }}');
        renderTimeline(certsData);
    </script>
{%- endmacro %}