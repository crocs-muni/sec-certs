{% from "common/entry.html.jinja2" import keywords_card, opt_line %}

{% macro cc_keywords(keyword_scan, doc_prefix, hidden=[], map_funcs={}) -%}
    {{ keywords_card(keyword_scan, doc_prefix, "common-criteria", "Common Criteria", {"Security level": "cc_security_level",
                                                                        "Claims": "cc_claims",
																		"Security Assurance Requirements (SAR)": "cc_sar",
																		"Security Functional Requirements (SFR)": "cc_sfr",
																		"Protection profiles": "cc_protection_profile_id",
																		"Certificates": "cc_cert_id",
																		"Evaluation facilities": "eval_facility"}, hidden, map_funcs) }}
{%- endmacro %}

{% macro render_frontpage(cert, doc_type, title) %}
    {% if cert["pdf_data"][doc_type] %}
        {% if cert["pdf_data"][doc_type]["anssi"] %}
            {% set frontpage = cert["pdf_data"][doc_type]["anssi"] %}
        {% elif cert["pdf_data"][doc_type]["bsi"] %}
            {% set frontpage = cert["pdf_data"][doc_type]["bsi"] %}
        {% elif cert["pdf_data"][doc_type]["niap"] %}
            {% set frontpage = cert["pdf_data"][doc_type]["niap"] %}
        {% elif cert["pdf_data"][doc_type]["canada"] %}
            {% set frontpage = cert["pdf_data"][doc_type]["canada"] %}
        {% elif cert["pdf_data"][doc_type]["nscib"] %}
            {% set frontpage = cert["pdf_data"][doc_type]["nscib"] %}
        {% elif cert["pdf_data"][doc_type][cert["scheme"]] %}
            {% set frontpage = cert["pdf_data"][doc_type][cert["scheme"]] %}
        {% endif %}
        {% if frontpage %}
            <h3 class="mt-3">Frontpage</h3>
            <table>
                <tbody>
                {{ opt_line("Certificate ID", "cert_id", frontpage, title) }}
                {{ opt_line("Certified item", "cert_item", frontpage, title) }}
                {{ opt_line("Certification lab", "cert_lab", frontpage, title) }}
                {{ opt_line("Developer", "developer", frontpage, title) }}
                </tbody>
            </table>
        {% endif %}
    {% endif %}
{% endmacro %}

{% macro render_status(status) %}
    {% if status == "active" %}
        <span class="text-success"><i class="fas fa-check-square"></i> active</span>
    {% elif status == "archived" %}
        <span class="text-warning"><i class="fas fa-times-circle"></i> archived</span>
    {% else %}
        <span>{{ status }}</span>
    {% endif %}
{%- endmacro %}

{% macro render_document_type(document_type) %}
    {% if document_type == "cert" %}
        <span>Certificate</span>
    {% elif document_type == "report" %}
        <span>Certification Report</span>
    {% elif document_type == "target" %}
        <span>Security Target</span>
    {% endif %}
{%- endmacro %}

{% macro render_category(category) %}
    <span title="{{ category }}">
    {% set cat = get_cc_category(category) %}
        {% if cat %}
            <i class="fas fa-fw {{ cat['icon'] }}" aria-label="{{ category }}"></i>
        {% endif %}
    </span>
{%- endmacro %}

{% macro render_eal(eal) %}
    {% set ealm = eal.replace("+", "") %}
    {%- if get_cc_eal(ealm) -%}
        <abbr title="{{ get_cc_eal(ealm)["name"] }}">{{ eal }}</abbr>
    {%- elif get_cc_sar(eal) -%}
        <abbr title="{{ get_cc_sar(eal) }}">{{ eal }}</abbr>
    {%- else -%}
        {{ eal }}
    {%- endif -%}
{%- endmacro %}

{% macro render_sfrs(sfr) %}
    {%- if get_cc_sfr(sfr) -%}
        <abbr title="{{ get_cc_sfr(sfr) }}">{{ sfr }}</abbr>
    {%- else -%}
        {{ sfr }}
    {%- endif -%}
{%- endmacro %}

{% macro render_sars(sar) %}
    {%- if get_cc_sar(sar) -%}
        <abbr title="{{ get_cc_sar(sar) }}">{{ sar }}</abbr>
    {%- else -%}
        {{ sar }}
    {%- endif -%}
{%- endmacro %}


{% macro render_plot(timeline) %}
    <div class="row mt-4 mb-4">
        <div class="col border ml-3 mr-3">
            <h2>Timeline</h2>
            <span>Matched certificates (monthly)</span>
            <div id="timeline"></div>
        </div>
    </div>

    <script>
        function renderTimeline(timeline) {
            let parser = d3.timeParse("%a, %d %b %Y %H:%M:%S GMT");
            let weekFormatter = d3.timeFormat("%m,%Y");
            let weekParser = d3.timeParse("%m,%Y");
            let data = d3.map(timeline, d => ({date: parser(d)}));
            let extent = d3.extent(data, d => d.date);
            let weekRange = d3.timeWeek.range(extent[0], extent[1]);

            let width = 800;
            let height = 320;
            let margin = {top: 20, right: 30, bottom: 30, left: 40};

            let x = d3.scaleUtc()
                .domain(extent)
                .range([margin.left, width - margin.right]);

            let nested = d3.rollup(data, v => v.length, d => weekFormatter(d.date));
            let base = d3.rollup(weekRange, v => 0, d => weekFormatter(d));

            let y = d3.scaleLinear()
                .domain([0, d3.max(nested, d => d[1])]).nice()
                .range([height - margin.bottom, margin.top]);

            let xAxis = g => g
                .attr("transform", `translate(0,${height - margin.bottom})`)
                .call(d3.axisBottom(x).ticks(width / 80).tickSizeOuter(0));
            let yAxis = g => g
                .attr("transform", `translate(${margin.left},0)`)
                .call(d3.axisLeft(y).tickFormat(d3.format("d")))
                .call(g => g.select(".domain").remove());
            let line = d3.line()
                .x(d => x(d.week))
                .y(d => y(d.count));

            let full = new d3.InternMap([...base, ...nested]);

            let res = d3.sort(d3.map(full, ([name, value]) => ({week: weekParser(name), count: value})), (d) => d.week);
            const svg = d3.create("svg")
                .attr("viewBox", [0, 0, width, height]);

            svg.append("path")
                .attr("fill", "none")
                .attr("stroke", "var(--bs-primary)")
                .attr("stroke-width", 1.5)
                .attr("d", line(res));

            svg.append("g")
                .call(xAxis);

            svg.append("g")
                .call(yAxis);

            d3.select("#timeline").append(() => svg.node());
        }

        let certsData = JSON.parse('{{ timeline|tojson }}');
        renderTimeline(certsData);
    </script>
{%- endmacro %}